// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: voting.proto

package votingpb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Crypto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Upvotes   int64  `protobuf:"varint,3,opt,name=upvotes,proto3" json:"upvotes,omitempty"`
	Downvotes int64  `protobuf:"varint,4,opt,name=downvotes,proto3" json:"downvotes,omitempty"`
	Score     int64  `protobuf:"varint,5,opt,name=score,proto3" json:"score,omitempty"`
}

func (x *Crypto) Reset() {
	*x = Crypto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Crypto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Crypto) ProtoMessage() {}

func (x *Crypto) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Crypto.ProtoReflect.Descriptor instead.
func (*Crypto) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{0}
}

func (x *Crypto) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Crypto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Crypto) GetUpvotes() int64 {
	if x != nil {
		return x.Upvotes
	}
	return 0
}

func (x *Crypto) GetDownvotes() int64 {
	if x != nil {
		return x.Downvotes
	}
	return 0
}

func (x *Crypto) GetScore() int64 {
	if x != nil {
		return x.Score
	}
	return 0
}

type CreateCryptoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto *Crypto `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *CreateCryptoRes) Reset() {
	*x = CreateCryptoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCryptoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCryptoRes) ProtoMessage() {}

func (x *CreateCryptoRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCryptoRes.ProtoReflect.Descriptor instead.
func (*CreateCryptoRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCryptoRes) GetCrypto() *Crypto {
	if x != nil {
		return x.Crypto
	}
	return nil
}

type UpvoteCryptoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UpvoteCryptoReq) Reset() {
	*x = UpvoteCryptoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpvoteCryptoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpvoteCryptoReq) ProtoMessage() {}

func (x *UpvoteCryptoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpvoteCryptoReq.ProtoReflect.Descriptor instead.
func (*UpvoteCryptoReq) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{2}
}

func (x *UpvoteCryptoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpvoteCryptoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *UpvoteCryptoRes) Reset() {
	*x = UpvoteCryptoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpvoteCryptoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpvoteCryptoRes) ProtoMessage() {}

func (x *UpvoteCryptoRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpvoteCryptoRes.ProtoReflect.Descriptor instead.
func (*UpvoteCryptoRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{3}
}

func (x *UpvoteCryptoRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type DownvoteCryptoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DownvoteCryptoReq) Reset() {
	*x = DownvoteCryptoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownvoteCryptoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownvoteCryptoReq) ProtoMessage() {}

func (x *DownvoteCryptoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownvoteCryptoReq.ProtoReflect.Descriptor instead.
func (*DownvoteCryptoReq) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{4}
}

func (x *DownvoteCryptoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DownvoteCryptoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DownvoteCryptoRes) Reset() {
	*x = DownvoteCryptoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownvoteCryptoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownvoteCryptoRes) ProtoMessage() {}

func (x *DownvoteCryptoRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownvoteCryptoRes.ProtoReflect.Descriptor instead.
func (*DownvoteCryptoRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{5}
}

func (x *DownvoteCryptoRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetCryptoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetCryptoReq) Reset() {
	*x = GetCryptoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoReq) ProtoMessage() {}

func (x *GetCryptoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoReq.ProtoReflect.Descriptor instead.
func (*GetCryptoReq) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{6}
}

func (x *GetCryptoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCryptoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto *Crypto `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *GetCryptoRes) Reset() {
	*x = GetCryptoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCryptoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCryptoRes) ProtoMessage() {}

func (x *GetCryptoRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCryptoRes.ProtoReflect.Descriptor instead.
func (*GetCryptoRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{7}
}

func (x *GetCryptoRes) GetCrypto() *Crypto {
	if x != nil {
		return x.Crypto
	}
	return nil
}

type DeleteCryptoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteCryptoReq) Reset() {
	*x = DeleteCryptoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCryptoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCryptoReq) ProtoMessage() {}

func (x *DeleteCryptoReq) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCryptoReq.ProtoReflect.Descriptor instead.
func (*DeleteCryptoReq) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteCryptoReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteCryptoRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *DeleteCryptoRes) Reset() {
	*x = DeleteCryptoRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCryptoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCryptoRes) ProtoMessage() {}

func (x *DeleteCryptoRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCryptoRes.ProtoReflect.Descriptor instead.
func (*DeleteCryptoRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteCryptoRes) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListCryptosReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListCryptosReq) Reset() {
	*x = ListCryptosReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptosReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptosReq) ProtoMessage() {}

func (x *ListCryptosReq) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptosReq.ProtoReflect.Descriptor instead.
func (*ListCryptosReq) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{10}
}

type ListCryptosRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Crypto *Crypto `protobuf:"bytes,1,opt,name=crypto,proto3" json:"crypto,omitempty"`
}

func (x *ListCryptosRes) Reset() {
	*x = ListCryptosRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_voting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCryptosRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCryptosRes) ProtoMessage() {}

func (x *ListCryptosRes) ProtoReflect() protoreflect.Message {
	mi := &file_voting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCryptosRes.ProtoReflect.Descriptor instead.
func (*ListCryptosRes) Descriptor() ([]byte, []int) {
	return file_voting_proto_rawDescGZIP(), []int{11}
}

func (x *ListCryptosRes) GetCrypto() *Crypto {
	if x != nil {
		return x.Crypto
	}
	return nil
}

var File_voting_proto protoreflect.FileDescriptor

var file_voting_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x7a, 0x0a, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x75, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x72, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x21, 0x0a,
	0x0f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2b, 0x0a, 0x0f, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x23, 0x0a,
	0x11, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52,
	0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x2d, 0x0a, 0x11, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x1e, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x36, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x22, 0x21, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2b, 0x0a, 0x0f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x10, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x22, 0x38, 0x0a, 0x0e, 0x4c,
	0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x06, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x06, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x32, 0x8e, 0x03, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x0e, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x1a, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x14, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x55, 0x70, 0x76,
	0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x55, 0x70, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x55, 0x70, 0x76, 0x6f,
	0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0e, 0x44,
	0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x12, 0x19, 0x2e,
	0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x76, 0x6f, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x12, 0x17, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x52, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x73, 0x12, 0x16, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x76,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x73, 0x52, 0x65, 0x73, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_voting_proto_rawDescOnce sync.Once
	file_voting_proto_rawDescData = file_voting_proto_rawDesc
)

func file_voting_proto_rawDescGZIP() []byte {
	file_voting_proto_rawDescOnce.Do(func() {
		file_voting_proto_rawDescData = protoimpl.X.CompressGZIP(file_voting_proto_rawDescData)
	})
	return file_voting_proto_rawDescData
}

var file_voting_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_voting_proto_goTypes = []interface{}{
	(*Crypto)(nil),            // 0: voting.Crypto
	(*CreateCryptoRes)(nil),   // 1: voting.CreateCryptoRes
	(*UpvoteCryptoReq)(nil),   // 2: voting.UpvoteCryptoReq
	(*UpvoteCryptoRes)(nil),   // 3: voting.UpvoteCryptoRes
	(*DownvoteCryptoReq)(nil), // 4: voting.DownvoteCryptoReq
	(*DownvoteCryptoRes)(nil), // 5: voting.DownvoteCryptoRes
	(*GetCryptoReq)(nil),      // 6: voting.GetCryptoReq
	(*GetCryptoRes)(nil),      // 7: voting.GetCryptoRes
	(*DeleteCryptoReq)(nil),   // 8: voting.DeleteCryptoReq
	(*DeleteCryptoRes)(nil),   // 9: voting.DeleteCryptoRes
	(*ListCryptosReq)(nil),    // 10: voting.ListCryptosReq
	(*ListCryptosRes)(nil),    // 11: voting.ListCryptosRes
}
var file_voting_proto_depIdxs = []int32{
	0,  // 0: voting.CreateCryptoRes.crypto:type_name -> voting.Crypto
	0,  // 1: voting.GetCryptoRes.crypto:type_name -> voting.Crypto
	0,  // 2: voting.ListCryptosRes.crypto:type_name -> voting.Crypto
	0,  // 3: voting.VotingService.CreateCrypto:input_type -> voting.Crypto
	6,  // 4: voting.VotingService.GetCrypto:input_type -> voting.GetCryptoReq
	2,  // 5: voting.VotingService.UpvoteCrypto:input_type -> voting.UpvoteCryptoReq
	4,  // 6: voting.VotingService.DownvoteCrypto:input_type -> voting.DownvoteCryptoReq
	8,  // 7: voting.VotingService.DeleteCrypto:input_type -> voting.DeleteCryptoReq
	10, // 8: voting.VotingService.ListCryptos:input_type -> voting.ListCryptosReq
	1,  // 9: voting.VotingService.CreateCrypto:output_type -> voting.CreateCryptoRes
	7,  // 10: voting.VotingService.GetCrypto:output_type -> voting.GetCryptoRes
	3,  // 11: voting.VotingService.UpvoteCrypto:output_type -> voting.UpvoteCryptoRes
	5,  // 12: voting.VotingService.DownvoteCrypto:output_type -> voting.DownvoteCryptoRes
	9,  // 13: voting.VotingService.DeleteCrypto:output_type -> voting.DeleteCryptoRes
	11, // 14: voting.VotingService.ListCryptos:output_type -> voting.ListCryptosRes
	9,  // [9:15] is the sub-list for method output_type
	3,  // [3:9] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_voting_proto_init() }
func file_voting_proto_init() {
	if File_voting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_voting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Crypto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCryptoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpvoteCryptoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpvoteCryptoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownvoteCryptoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownvoteCryptoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCryptoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCryptoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCryptoRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptosReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_voting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCryptosRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_voting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_voting_proto_goTypes,
		DependencyIndexes: file_voting_proto_depIdxs,
		MessageInfos:      file_voting_proto_msgTypes,
	}.Build()
	File_voting_proto = out.File
	file_voting_proto_rawDesc = nil
	file_voting_proto_goTypes = nil
	file_voting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingServiceClient interface {
	CreateCrypto(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CreateCryptoRes, error)
	GetCrypto(ctx context.Context, in *GetCryptoReq, opts ...grpc.CallOption) (*GetCryptoRes, error)
	UpvoteCrypto(ctx context.Context, in *UpvoteCryptoReq, opts ...grpc.CallOption) (*UpvoteCryptoRes, error)
	DownvoteCrypto(ctx context.Context, in *DownvoteCryptoReq, opts ...grpc.CallOption) (*DownvoteCryptoRes, error)
	DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error)
	ListCryptos(ctx context.Context, in *ListCryptosReq, opts ...grpc.CallOption) (VotingService_ListCryptosClient, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) CreateCrypto(ctx context.Context, in *Crypto, opts ...grpc.CallOption) (*CreateCryptoRes, error) {
	out := new(CreateCryptoRes)
	err := c.cc.Invoke(ctx, "/voting.VotingService/CreateCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) GetCrypto(ctx context.Context, in *GetCryptoReq, opts ...grpc.CallOption) (*GetCryptoRes, error) {
	out := new(GetCryptoRes)
	err := c.cc.Invoke(ctx, "/voting.VotingService/GetCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) UpvoteCrypto(ctx context.Context, in *UpvoteCryptoReq, opts ...grpc.CallOption) (*UpvoteCryptoRes, error) {
	out := new(UpvoteCryptoRes)
	err := c.cc.Invoke(ctx, "/voting.VotingService/UpvoteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) DownvoteCrypto(ctx context.Context, in *DownvoteCryptoReq, opts ...grpc.CallOption) (*DownvoteCryptoRes, error) {
	out := new(DownvoteCryptoRes)
	err := c.cc.Invoke(ctx, "/voting.VotingService/DownvoteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) DeleteCrypto(ctx context.Context, in *DeleteCryptoReq, opts ...grpc.CallOption) (*DeleteCryptoRes, error) {
	out := new(DeleteCryptoRes)
	err := c.cc.Invoke(ctx, "/voting.VotingService/DeleteCrypto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *votingServiceClient) ListCryptos(ctx context.Context, in *ListCryptosReq, opts ...grpc.CallOption) (VotingService_ListCryptosClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VotingService_serviceDesc.Streams[0], "/voting.VotingService/ListCryptos", opts...)
	if err != nil {
		return nil, err
	}
	x := &votingServiceListCryptosClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VotingService_ListCryptosClient interface {
	Recv() (*ListCryptosRes, error)
	grpc.ClientStream
}

type votingServiceListCryptosClient struct {
	grpc.ClientStream
}

func (x *votingServiceListCryptosClient) Recv() (*ListCryptosRes, error) {
	m := new(ListCryptosRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VotingServiceServer is the server API for VotingService service.
type VotingServiceServer interface {
	CreateCrypto(context.Context, *Crypto) (*CreateCryptoRes, error)
	GetCrypto(context.Context, *GetCryptoReq) (*GetCryptoRes, error)
	UpvoteCrypto(context.Context, *UpvoteCryptoReq) (*UpvoteCryptoRes, error)
	DownvoteCrypto(context.Context, *DownvoteCryptoReq) (*DownvoteCryptoRes, error)
	DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error)
	ListCryptos(*ListCryptosReq, VotingService_ListCryptosServer) error
}

// UnimplementedVotingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (*UnimplementedVotingServiceServer) CreateCrypto(context.Context, *Crypto) (*CreateCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCrypto not implemented")
}
func (*UnimplementedVotingServiceServer) GetCrypto(context.Context, *GetCryptoReq) (*GetCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCrypto not implemented")
}
func (*UnimplementedVotingServiceServer) UpvoteCrypto(context.Context, *UpvoteCryptoReq) (*UpvoteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpvoteCrypto not implemented")
}
func (*UnimplementedVotingServiceServer) DownvoteCrypto(context.Context, *DownvoteCryptoReq) (*DownvoteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownvoteCrypto not implemented")
}
func (*UnimplementedVotingServiceServer) DeleteCrypto(context.Context, *DeleteCryptoReq) (*DeleteCryptoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCrypto not implemented")
}
func (*UnimplementedVotingServiceServer) ListCryptos(*ListCryptosReq, VotingService_ListCryptosServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCryptos not implemented")
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_CreateCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crypto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).CreateCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.VotingService/CreateCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).CreateCrypto(ctx, req.(*Crypto))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_GetCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).GetCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.VotingService/GetCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).GetCrypto(ctx, req.(*GetCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_UpvoteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpvoteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).UpvoteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.VotingService/UpvoteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).UpvoteCrypto(ctx, req.(*UpvoteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_DownvoteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownvoteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).DownvoteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.VotingService/DownvoteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).DownvoteCrypto(ctx, req.(*DownvoteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_DeleteCrypto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCryptoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VotingServiceServer).DeleteCrypto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/voting.VotingService/DeleteCrypto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VotingServiceServer).DeleteCrypto(ctx, req.(*DeleteCryptoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _VotingService_ListCryptos_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCryptosReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VotingServiceServer).ListCryptos(m, &votingServiceListCryptosServer{stream})
}

type VotingService_ListCryptosServer interface {
	Send(*ListCryptosRes) error
	grpc.ServerStream
}

type votingServiceListCryptosServer struct {
	grpc.ServerStream
}

func (x *votingServiceListCryptosServer) Send(m *ListCryptosRes) error {
	return x.ServerStream.SendMsg(m)
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "voting.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCrypto",
			Handler:    _VotingService_CreateCrypto_Handler,
		},
		{
			MethodName: "GetCrypto",
			Handler:    _VotingService_GetCrypto_Handler,
		},
		{
			MethodName: "UpvoteCrypto",
			Handler:    _VotingService_UpvoteCrypto_Handler,
		},
		{
			MethodName: "DownvoteCrypto",
			Handler:    _VotingService_DownvoteCrypto_Handler,
		},
		{
			MethodName: "DeleteCrypto",
			Handler:    _VotingService_DeleteCrypto_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCryptos",
			Handler:       _VotingService_ListCryptos_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "voting.proto",
}
